 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:test_user){
    User.create(email: 'test@test.com', password: 'password', name: 'test')
  }

  let(:test_post){
    Post.create(user_id: test_user.id, title: 'test', body: 'test')
  }

  let(:valid_attributes) {
    {user_id: test_user.id, commentable_id: test_post.id, commentable_type: 'Post', body: 'test'}
  }

  let(:invalid_attributes) {
    {user_id: test_user.id, commentable_id: test_post.id, commentable_type: 'Post'}
  }

  before(:each){
    sign_in test_user
  }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post comments_url, params: { comment: valid_attributes }, xhr: true
        }.to change(Comment, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post comments_url, params: { comment: invalid_attributes }, xhr: true
        }.to change(Comment, :count).by(0)
      end
    end
  end
end
